/*
 * Project: Shared Portal Framework Copyright (c) 2008 HP. All Rights Reserved.
 */
package com.hp.it.spf.htmlviewer.portlet.exception;

import java.util.Iterator;
import java.util.LinkedHashMap;
import javax.portlet.PortletRequest;

import com.hp.frameworks.wpa.portlet.transaction.Transaction;
import com.hp.frameworks.wpa.portlet.transaction.TransactionImpl;
import com.hp.it.spf.xa.exception.portlet.BusinessException;
import com.hp.websat.timber.model.StatusIndicator;

import com.hp.it.spf.htmlviewer.portlet.util.Consts;

/**
 * A business exception used in <code>config</code> mode of the
 * <code>html-viewer</code> portlet when there has been an administrator
 * data-entry error. The error diagnostics representing those error(s) are set
 * into this exception by the constructor. The constructor also sets the WPAP
 * Timber logging status to indicate error, and adds the error codes and
 * messages to the business log as context info. No WPAP Timber error log entry
 * is generated by this class; administrator data-input errors are not
 * significant enough to warrant logging.
 * 
 * @author <link href="scott.jorgenson@hp.com">Scott Jorgenson</link>
 * @author <link href="jyu@hp.com">Yu Jie</link>
 * @version TBD
 * @see <code>com.hp.it.spf.xa.exception.portlet.BusinessException</code>
 */
public class InputErrorException extends BusinessException {

    /**
     * serialVersionUID long
     */
    private static final long serialVersionUID = 1L;

    private LinkedHashMap<String, String> errors = null;

    /**
     * Constructs the <code>InputErrorException</code> given a map of error
     * codes and diagnostic messages - one for each error condition. Also sets
     * the WPAP Timber logging status indicator for an error, and logs the error
     * codes and messages to the business log as context info.
     * 
     * @param pRequest
     *            - The portlet request
     * @param pErrors
     *            - A map of error codes to (optional) diagnostic messages.
     */
    public InputErrorException(PortletRequest pRequest,
	    LinkedHashMap<String, String> pErrors) {
	super(Consts.ERROR_CODE_INPUT);
	this.errors = pErrors;
	Transaction trans = TransactionImpl.getTransaction(pRequest);
	if (trans != null) {
	    if (pErrors != null) {
		Iterator i = pErrors.keySet().iterator();
		String errorCode, errorDiagnostic;
		while (i.hasNext()) {
		    errorCode = (String) i.next();
		    errorDiagnostic = pErrors.get(errorCode);
		    if (errorDiagnostic != null) {
			// Don't bother to log error for an input error.
			// trans.addError(this, errorMsg, errorCode);
			trans.addContextInfo(errorCode, errorDiagnostic);
		    } else {
			// Don't bother to log error for an input error.
			// trans.addError(this, null, errorCode);
			trans.addContextInfo(errorCode, null);
		    }
		}
	    } else {
		// Don't bother to log error for an input error.
		// trans.addError(this);
	    }
	    trans.setStatusIndicator(StatusIndicator.ERROR);
	}
    }
}