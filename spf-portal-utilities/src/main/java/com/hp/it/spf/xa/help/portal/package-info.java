/**
 * <p>
 * This package contains plain Java classes for online help in Vignette portal
 * components in Shared Portal Framework. There are two kinds of online help
 * represented among these classes: <i>contextual help</i> and <i>global
 * help</i> (sometimes called <i>site help</i>).
 * </p>
 * <ul>
 * <li>
 * <p>
 * Contextual help is a brief targeted help snippet, presented as a dynamic
 * overlay on the Web page when the user clicks a contextual help hyperlink. It
 * is available in both SPF portlet applications (see the SPF portlet utilities
 * developer guide), and SPF Vignette portal components. With portal components,
 * you specify the help content as message properties in your portal component's
 * resource bundle, and then generate all the DHTML for the overlay and the link
 * using Java code (see
 * {@link com.hp.it.spf.xa.help.portal.ClassicContextualHelpProvider}) or an
 * equivalent JSP tag (see {@link com.hp.it.spf.xa.help.portal.tag}). You can
 * also inject contextual help into a message using Java code (see
 * {@link com.hp.it.spf.xa.i18n.portal}) or JSP tag (see
 * {@link com.hp.it.spf.xa.i18n.portal.tag}).
 * </p>
 * </li>
 * <li>
 * <p>
 * Global help is intended for a comprehensive HTML document spanning help
 * topics across your portal site. It is implemented as a secondary page, which
 * you instantiate for your portal site with your own content. See the SPF
 * global help developer's guide. If you are interested in presenting that
 * secondary page through a popup window with non-standard features set (like no
 * toolbar, no buttons, etc), then you can generate all the DHTML for the
 * corresponding global help hyperlink in an SPF Vignette portal component,
 * using Java code (see
 * {@link com.hp.it.spf.xa.help.portal.ClassicGlobalHelpProvider}) or an
 * equivalent JSP tag (see {@link com.hp.it.spf.xa.help.portal.tag}). As above,
 * you can also inject a global help link into a message. Remember though that
 * the actual global help content is in a secondary page, not part of your
 * current portal component, unlike contextual help - see the SPF global help
 * developer's guide for more information.
 * </p>
 * <p>
 * Note that SPF has decided on architectural principles that global help is, by
 * definition, a portal-wide artifact - and so the generator for a global help
 * hyperlink is also, by definition, envisioned as being a portal construct.
 * Therefore SPF does not provide any global help link generation facility for
 * on the portlet side - ie you will not find any global help utilities in the
 * SPF portlet utilities, for example.
 * </p>
 * </li>
 * </ul>
 * 
 * <hr>
 * <h3>ClassicContextualHelpProvider</h3>
 * <p>
 * The {@link com.hp.it.spf.xa.help.portal.ClassicContextualHelpProvider} class
 * represents an instance of portal contextual help, in its "classic" rendition.
 * </p>
 * 
 * <p>
 * As with all kinds of contextual help, this class lets you set some content
 * for the contextual help hyperlink (text, an image, etc), as well as some
 * <b>brief</b> content for the contextual help itself (more text and images,
 * etc). And it provides a
 * {@link com.hp.it.spf.xa.help.portal.ClassicContextualHelpProvider#getHTML(boolean)}
 * method for generating a string of HTML ready to be output which expresses all
 * of that: the help content itself as well as the hyperlink which opens it.
 * </p>
 * 
 * <p>
 * HPWeb "classic" contextual help presents the help in a dynamic overlay, with
 * a title bar. So, as "classic" contextual help in particular, this class also
 * lets you set some content for the contextual help title (eg some <b>very</b>
 * brief text), as well as numerous options for styling the look-and-feel of the
 * contextual help layer. The string emitted by the
 * {@link com.hp.it.spf.xa.help.portal.ClassicContextualHelpProvider#getHTML(boolean)}
 * is a long string of DHTML which produces a dragable dynamic overlay
 * containing the help title and content, when the link is clicked, and which
 * can be dismissed by clicking on an "X" image contained in the layer.
 * </p>
 * 
 * <p>
 * For example, consider the following text message to be displayed in your UI:
 * </p>
 * 
 * <img src="doc-files/contextualHelpLink.jpg">
 * 
 * <p>
 * In this message, the part generated by
 * {@link com.hp.it.spf.xa.help.portal.ClassicContextualHelpProvider#getHTML(boolean)}
 * is the link labeled <code>secure</code>. And when the link is clicked, the
 * DHTML in that link reveals a hidden layer (table) looking like this:
 * </p>
 * 
 * <img src="doc-files/contextualHelp.jpg">
 * 
 * <p>
 * The table is draggable and can be closed by clicking on the "X" image. You
 * may configure some <code>ALT</code> text for the "X" image in your message
 * properties, using the <code>contextualHelp.close.alt</code> message key. For
 * example, if you have the following message in your portal component's
 * resource bundle:
 * </p>
 * 
 * <blockquote>
 * 
 * <pre>
 * contextualHelp.close.alt = Close
 * </pre>
 * 
 * </blockquote>
 * 
 * <p>
 * Then when the user mouses-over the "X" image in the contextual help layer, it
 * looks like this:
 * </p>
 * 
 * <img src="doc-files/contextualHelpAlt.jpg">
 * 
 * <p>
 * <b>Note:</b> The style of the table shown above is the default style (which
 * results when none of the style or width setters are specified in the class to
 * override it). Use the class setters (like
 * {@link com.hp.it.spf.xa.help.portal.ClassicContextualHelpProvider#setWidth(int)}
 * ) to apply a different size or style.
 * </p>
 * 
 * <p>
 * <b>Note:</b> The returned HTML from this class can include no-script markup
 * for the unscripted case (ie JavaScript disabled in the browser). Use the
 * class setter
 * {@link com.hp.it.spf.xa.help.portal.ClassicContextualHelpProvider#setNoScriptHref(java.lang.String)}
 * to specify a no-script HREF - this can be an entire URL, or just a document
 * fragment name (beginning with <code>#</code>). By default, the no-script
 * markup will presume the existence of a global help secondary page for your
 * site and point the contextual help hyperlink to it. If you gave just a
 * document fragment name as your no-script HREF, that will be used as a
 * fragment name for the global help page.
 * </p>
 * 
 * <p>
 * Please see the class documentation for more information.
 * </p>
 * 
 * <hr>
 * <h3>ClassicGlobalHelpProvider</h3>
 * 
 * <p>
 * The {@link com.hp.it.spf.xa.help.portal.ClassicGlobalHelpProvider} represents
 * a hyperlink to your portal site's global help secondary page, which opens in
 * the "classic" manner (ie, as a child popup window with window features set
 * according to your specifications - such as no address bar, no tool bar, no
 * back/forward buttons, etc). You set the parameters for the link into the
 * object, and then use its
 * {@link com.hp.it.spf.xa.help.portal.ClassicGlobalHelpProvider#getHTML(boolean, boolean)}
 * or
 * {@link com.hp.it.spf.xa.help.portal.ClassicGlobalHelpProvider#getHTML(boolean)}
 * methods to generate a string of DHTML for rendering your classic global help
 * link.
 * </p>
 * 
 * <p>
 * Please see the class documentation for more information.
 * </p>
 * 
 * <hr>
 * <h3>Other Classes in this Package</h3>
 * 
 * <h4>GlobalHelpProvider</h4>
 * <p>
 * The {@link com.hp.it.spf.xa.help.portal.GlobalHelpProvider} is the abstract
 * base class for various generators of hyperlinks pointing to global help.
 * Currently there is only one such, the
 * <code>com.hp.it.spf.xa.help.portal.ClassicGlobalHelpProvider</code> described
 * above. If you wanted to create your own global help hyperlink generator, you
 * could subclass <code>com.hp.it.spf.xa.help.portal.GlobalHelpProvider</code>
 * and create your own.
 * </p>
 * 
 * <h4>GlobalHelpUtility</h4>
 * <p>
 * The {@link com.hp.it.spf.xa.help.portal.GlobalHelpUtility} is a utility class
 * used internally by generators of global help hyperlinks.
 * </p>
 * 
 */
package com.hp.it.spf.xa.help.portal;

