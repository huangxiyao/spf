<?xml version="1.0"?>

<!--
*
* Copyright 1999-2007 Vignette Corporation.
* All rights reserved.
*
* THIS PROGRAM IS CONFIDENTIAL AND AN UNPUBLISHED WORK AND TRADE
* SECRET OF THE COPYRIGHT HOLDER, AND DISTRIBUTED ONLY UNDER RESTRICTION.
*
* EXCEPT AS EXPLICITLY STATED IN A WRITTEN AGREEMENT BETWEEN THE PARTIES,
* THE SOFTWARE IS PROVIDED AS-IS, WITHOUT WARRANTIES OF ANY KIND, EXPRESS
* OR IMPLIED, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NONINFRINGEMENT,
* PERFORMANCE, AND QUALITY.
*
-->

<!--
* These comments provide information about the elements and attributes of
* authentication.xml.
*
* If you are using Windows, SQL, or SSO authentication, Portal uses this
* file (authentication.xml) to configure the authentication system.
* If you are using JNDI authentication, Portal uses the appropriate JNDI
* authentication file (for example, PortalInstallDir/config/examples/usermanagement/
* ldap/sunone/authentication_read_write.xml or authentication_read_only.xml)
* instead of this file. Refer to Portal Configuration Guide for more details about configuring 
* JNDI authentication.
*
* As shipped, Portal is configured to use a SQL authenticator, which
* validates users against the default Portal SQL database.
*
* PortalInstallDir/config/examples/authentication.sample contains examples of
* preconfigured realms for the authenticators that Vignette ships.
*
* Vignette recommends that you print out this section and use it as
* a reference if you need to modify any of the elements and attributes
* of the authentication configuration files.
*
* Elements and attributes of authentication.xml
* =============================================
* AUTHENTICATION - Contains one or more REALM elements.
*
* REALM - Associates an authenticator or an SSO product with a realm.
*	Properties vary depending on the type of authenticator (Windows,
*	SQL, JNDI, or SSO). PortalInstallDir/config/examples/authentication.sample
* 	contains sample realms for the Windows and SSO.
*
*	id - Uniquely identifies a realm. Unless you are using a custom
*	   realm, use the default realm ID provided by Vignette. Required.
*	   For example, id="realm1".
*
*	title - Identifies a realm on Portal pages, such as the user's login
*	   page. Required. For example, id="Intranet".
*
*	description - Description of the realm that system administrators
*	   use to identify a realm. Users do not see the description.
*	   For example, description="Intranet for employees".
*
*	self-register-description - Description of the realm that appears on
*	   self-registration pages and helps users determine which user name
*	   and password to use during login.
*
*	default - Indicates whether the realm is the default realm for the
*	   system. This setting determines the realm in which the server
*	   server administrator is created during startup, if the server
*	   administrator does not already exist. Note that if there is
*   	   more than one realm, it is possible to change the default
*	   realm for a server administrator. Default value is false.
*
*	logon-case-sensitive - Indicates whether Portal checks the case
*	   sensitivity of user logins (for example, whether to
*	   differentiate between "Joe Smith" and "joe smith"). The data
*	   source for the authentication system must support
*	   case-sensitivity in order for this property to work. If
*	   set to "false," the data source stores new user authentication
*	   data in lowercase, regardless of the case used when creating
*	   the user in Portal. Refer to Portal Configuration Guide for more
*	   information about case-sensitivity.
*
*	samedatasourceasusermgr - Indicates whether user authentication
*	    data (typically, user name and password) is found in the same
*	    data source that the user manager accesses to store and
*	    retrieve user data. If "true" and if users are allowed to
*	    create new users, the create-account and change-password
*	    attributes of the AUTHENTICATOR element must be set to
*	    "true" as well. Defaults to "false".
*
*	virtual-realm-base - Indicates whether the realm exists to support creation
*	    of virtual realms. Authenticators do not directly operate on a base
*	    realm, but rather on one of the associated virtual realms. For instance,
*	    it is not possible to create an account directly within a base realm,
*	    rather the account is created in the virtual realm which then "writes
*	    through" to the base realm. Defaults to "false".
*
* AUTHENTICATOR - Specifies the functions of an authenticator. The functions
* 	    of an authenticator vary. For example, the SQL authenticator
*	    allows administrators to create accounts and change passwords
*	    in the SQL database; the Windows authenticator does not. Do
*	    not use this element or its subelements to configure single-
*	    sign-on.
*
*	class - Identifies the fully-qualified class for the authenticator.
* 	    Required. For example, class="com.epicentric.authentication.
*	    SQLAuthenticator".
*
*	authenticate - Indicates whether it is possible to use the
*	    authenticator for user validation. If "false," realms that use
*           this authenticator cannot validate user login information.
*	    Default value is "false".
*
*	create-account - Indicates whether Portal can create authentication
*	    accounts for users. If "false", guests cannot self-register,
*	    and administrators cannot create Portal users unless these users
*	    already have authentication accounts. The Windows authenticator
*	    does not support creation of user authentication accounts
*	    through Portal. Defaults to "false". See also the
*	    samedatasourceasusermgr attribute of the REALM element.
*
*	remove-account - Indicates whether administrators can delete user
*	    authentication accounts from Portal. If "false", user authenti-
*	    cation data is not deleted when users are deleted from Portal.
* 	    The Windows authenticator does not support deletion of user
*	    authentication accounts through Portal. Defaults to "false".
*
*	retrieve-forgotten-password - Indicates whether the authenticator
*	    allows users to retrieve forgotten passwords. Most authenticators
*	    do not allow users to retrieve old passwords. If "true", Portal
*	    e-mails the old password. If "false", users cannot retrieve
*	    their old passwords. However, they may be able to set new
*	    new passwords, depending on the value of the change-password
*	    attribute (below).
*
*	change-password - Determines whether users can change their
*	    passwords through Portal. If "false", users cannot use Portal to
*	    change their passwords. Some authenticators, such as the
*	    Windows authentication, do not support this feature.
*	    Defaults to "false".
*
*	Note: If both retrieve-forgotten-password and change-password are
*	"false", the Forgotten Password link does not appear on user pages.
*
*	does-account-exist - Indicates whether users must have existing
*	    authentications account before they can be added as Portal users.
*	    If "true", users must have authentication accounts before
*	    they can be added to Portal. If "false", Portal does not check for
*  	    existing authentication accounts. The Windows authenticator
* 	    does not support this feature.
*
* PROPERTY LIST - Contains a set of authenticator properties.
*
* PROPERTY - Defines the data source and data connection properties that
*	    the authenticator uses. Each authenticator shipped with Portal
*	    has a set of preconfigured properties; do not modify these
*	    properties. The sample authentication configuration file
* 	    (authentication.sample) lists the properties for each
*	    of the Portal authenticators.
*
*	name - Identifies a Portal key required for configuration. For example,
*	    the SQL authenticator has a connectionpool property.
*
*	value - Provides the value for the Portal key. For example, the value
*	    for the connectionpool key of the SQL authenticator is
*	    "default."
*
* ACCOUNT-PROPERTY-DESCRIPTOR - Provides information about the user
* 	    property that the authenticator uses to validate login
*	    information.
*
*	id - User-friendly ID that uniquely identifies the user property
*	    (a column in the SQL database) to validate when users log in
*	    to Portal. Does not need to follow database naming conventions.
*	    Required. For example, id="userid".
*
*	title - Provides the label for the HTML field in which users type
*	    log in information. For example, title="UserID".
*
*	description - Describes the property for system administrators;
*	    users do not see this description. For example,
*	    description="User ID".
*
*	data-type - Identifies the Java data type for the property. For
*	    example, data-type="java.lang.String".
*
*	max-size - Sets the length of the HTML field for the property.
*	    For example, max-size="64".
*
*	datasource-field - Maps the friendly ID (specified in the id
*	    attribute) to the SQL column that stores the user data.
*	    Not required for Windows authenticators. This value must
*	    match the value of the jndi.user.lookup.attribute property.
*	    (Refer to Portal Configuration Guide for details.) For example,
*	    datasource-field="uid".
*
* ACCOUNT-PROPERTY-ALIAS - Identifies a field in the authentication data
*	    source(such as a database or LDAP server) that is used as a
*	    variable by the authenticator.
*
*	alias - Defines a variable that the authenticator uses to represent
*	    a field in the authentication datasource(for example, a field
*	    in a database table).For example, alias="logon".
*
*	property-id - Identifies the user property that is aliased. Must
*	    correspond with the id attribute of the corresponding
*	    ACCOUNT-PROPERTY-DESCRIPTOR element. For example, if users
*   	    log in using their user ID, property-id="userid".
*
-->


<!DOCTYPE AUTHENTICATION
	SYSTEM "dtd/authentication.dtd">

<AUTHENTICATION>
		<REALM
			id="athp_realm1"
			title="@HP Single Sign On"
			description="@HP Single Sign On"
			default="true"
			logon-case-sensitive="true"
		>
			<SSO-VALIDATOR class="com.hp.it.spf.sso.portal.SPFATHPSSOValidator" login-enabled="false" logout-enabled="false"/>
		</REALM>
		
		<REALM
			id="hpp_realm1"
			title="Single Sign On"
			description="Single Sign On"
			default="false"
			logon-case-sensitive="true"
		>
			<SSO-VALIDATOR class="com.hp.it.spf.sso.portal.SPFDefaultSSOValidator" login-enabled="false" logout-enabled="false"/>
		</REALM>
		
</AUTHENTICATION>
