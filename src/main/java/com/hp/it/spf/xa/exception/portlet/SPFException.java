/*
 * Project: Shared Portal Framework
 * Copyright (c) 2008 HP. All Rights Reserved.
 **/
package com.hp.it.spf.xa.exception.portlet;

import javax.portlet.PortletRequest;
import com.hp.it.spf.xa.i18n.portlet.I18nUtility;

/**
 * <p>
 * This abstract class is the base class for an exception hierarchy which SPF
 * provides to portlet developers. It has 2 subclasses:
 * {@link BusinessException} for user-related errors (ie errors triggered by
 * invalid data submitted by the user and thus correctable by the user) and
 * {@link SystemException} for internal errors (ie system problems not the
 * user's fault). We recommend feature services either instantiate those classes
 * directly, or (better) subclass them into specific kinds of exceptions for
 * their use cases (eg <code>UserInputException extends BusinessException</code>,
 * <code>ForumsDatabaseUnavailableException extends SystemException</code>,
 * etc).
 * </p>
 * 
 * <p>
 * All SPF exceptions contain an <i>error code</i>, <i>error message</i>, and
 * optionally another {@link java.lang.Throwable} object (representing a
 * <i>root-cause error</i>) and/or a <i>localized message</i> (suitable for
 * display to the user). You provide these when you construct the SPF exception.
 * As follows:
 * </p>
 * 
 * <ul>
 * <li>
 * <p>
 * The <i>error code</i> you provide should be a short string codifying the
 * particular error condition. For lookup of the localized message to work (see
 * below), the error code needs to match one of your message keys. The error
 * code will become part of the exception message and will be included in the
 * WPAP error log record generated from this exception (if you throw it back to
 * the dispatcher, and you have enabled WPAP error logging - merely constructing
 * and using an SPF exception does <b>not</b> automatically generated an error
 * log entry).
 * </p>
 * </li>
 * <li>
 * <p>
 * The <i>error message</i> you provide should be an internal,
 * not-meant-for-the-user-to-see string describing the error condition. The
 * error message will become part of the exception message and will be included
 * in the WPAP error log record generated from this exception (if you throw it
 * back to the dispatcher, and you have enabled WPAP error logging - merely
 * constructing and using an SPF exception does <b>not</b> automatically
 * generated an error log entry).
 * </p>
 * </li>
 * <li>
 * <p>
 * The <i>root-cause</i> {@link java.lang.Throwable} you provide should
 * represent the root-cause of the particular error condition. Using this, you
 * can chain SPF exceptions (and other exceptions) together. The root-cause
 * throwable can itself be another SPF exception, or any other kind of Java
 * exception or throwable.
 * </p>
 * </li>
 * <li>
 * <p>
 * Finally, the <i>localized message</i> is generated by looking up a localized
 * message for your error code in your message resource bundles. Your error code
 * is used as the message key, and all the message resources you have configured
 * in your Spring application context are searched. This proceeds as documented
 * for
 * {@link com.hp.it.spf.xa.i18n.portlet.I18nUtility#getMessage(PortletRequest, String)}
 * (see). If a localized message is not found, then the default
 * {@link java.lang.Throwable#getLocalizedMessage()} behavior reverts when you
 * get the localized message from the exception later (ie, you will get a string
 * containing the error code and error message you set, generally not localized
 * nor suitable for the user).
 * </p>
 * </li>
 * </ul>
 * 
 * @author <link href="scott.jorgenson@hp.com">Scott Jorgenson</link>
 * @author sunnyee
 * @version TBD
 * @see <code>com.hp.it.spf.xa.exception.portlet.BusinessException</code>
 *      <code>com.hp.it.spf.xa.exception.portlet.SystemException</code>
 */
public abstract class SPFException extends Exception {

	// -------------------------------------------------------- Private members

	private String errorCode = null;
	private Throwable cause = null;
	private String errorMessage = null;
	private String localizedMessage = null;

	// ----------------------------------------------------------- Constructors

	/**
	 * <p>
	 * Construct an empty SPF exception. All class attributes are null or empty.
	 * </p>
	 */
	public SPFException() {
		super();
		this.errorCode = null;
		this.errorMessage = null;
		this.localizedMessage = getMessage();
		this.cause = null;
	}

	/**
	 * <p>
	 * Construct an SPF exception containing just an error code. This
	 * constructor assumes the error message and root-cause are null, and uses
	 * the error code in subsequent {@link #getMessage()} and
	 * {@link #getLocalizedMessage()} calls. Generally these strings are not
	 * fully localized and suitable for display to the user; use the
	 * {@link #SPFException(PortletRequest, String)} constructor to populate the
	 * exception with an appropriate localized message.
	 * </p>
	 * <p>
	 * See the class documentation above, for more description of these
	 * attributes.
	 * </p>
	 * 
	 * @param pErrorCode
	 *            The error code (eg <code>forums.addNote.blank</code>)
	 */
	public SPFException(String pErrorCode) {
		super("Error code: " + pErrorCode);
		this.errorCode = pErrorCode;
		this.errorMessage = null;
		this.localizedMessage = getMessage();
		this.cause = null;
	}

	/**
	 * <p>
	 * Construct an SPF exception containing an error code and an error message.
	 * This constructor assumes the root-cause is null, and uses the error code
	 * and error message in subsequent {@link #getMessage()} and
	 * {@link #getLocalizedMessage()} calls. Generally these strings are not
	 * fully localized and suitable for display to the user; use the
	 * {@link #SPFException(PortletRequest, String, String)} constructor to
	 * populate the exception with an appropriate localized message.
	 * </p>
	 * <p>
	 * See the class documentation above, for more description of these
	 * attributes.
	 * </p>
	 * 
	 * @param pErrorCode
	 *            The error code (eg <code>forums.addNote.blank</code>)
	 * @param pErrorMessage
	 *            The error message - eg:
	 *            <code>New note text for forums thread cannot be blank.</code>
	 */
	public SPFException(String pErrorCode, String pErrorMessage) {
		super("Error code: " + pErrorCode + "; Error message: " + pErrorMessage);
		this.errorCode = pErrorCode;
		this.errorMessage = pErrorMessage;
		this.localizedMessage = getMessage();
		this.cause = null;
	}

	/**
	 * <p>
	 * Construct an SPF exception containing an error code, error message, and
	 * some kind of root-cause {@link java.lang.Throwable}. This constructor
	 * uses the error code, error message, and the root-cause message (ie value
	 * of {@link java.lang.Throwable#getMessage()} in subsequent
	 * {@link #getMessage()} and {@link #getLocalizedMessage()} calls. Generally
	 * these strings are not fully localized and suitable for display to the
	 * user; use the
	 * {@link #SPFException(PortletRequest, String, Throwable, String)}
	 * constructor to populate the exception with an appropriate localized
	 * message.
	 * </p>
	 * <p>
	 * See the class documentation above, for more description of these
	 * attributes.
	 * </p>
	 * 
	 * @param pErrorCode
	 *            The error code (eg <code>forums.addNote.blank</code>)
	 * @param pCause
	 *            Some throwable (eg exception) which is the root cause of this
	 *            one
	 * @param pErrorMessage
	 *            The error message - eg:
	 *            <code>New note text for forums thread cannot be blank.</code>
	 */
	public SPFException(String pErrorCode, Throwable pCause,
			String pErrorMessage) {
		super("Error code: " + pErrorCode + "; Error message: " + pErrorMessage
				+ "; Cause: " + pCause, pCause);
		this.errorCode = pErrorCode;
		this.errorMessage = pErrorMessage;
		this.localizedMessage = getMessage();
		this.cause = pCause;
	}

	/**
	 * <p>
	 * Construct an SPF exception containing an error code, as well as a
	 * localized message for that error code which is retrieved from your
	 * portlet's message resources. This constructor assumes the root-cause and
	 * error message are null. Subsequent calls to
	 * {@link #getLocalizedMessage()} will return the localized message, while
	 * calls to {@link #getMessage()} will return a non-localized string
	 * (generally not suitable for the end-user) comprised of the error code.
	 * </p>
	 * <p>
	 * See the class documentation above, for description of these attributes.
	 * </p>
	 * 
	 * @param pRequest
	 *            The portlet request
	 * @param pErrorCode
	 *            The error code (eg <code>forums.addNote.blank</code>)
	 */
	public SPFException(PortletRequest pRequest, String pErrorCode) {
		super("Error code: " + pErrorCode);
		this.errorCode = pErrorCode;
		this.errorMessage = null;
		if (pErrorCode != null)
			this.localizedMessage = I18nUtility
					.getMessage(pRequest, pErrorCode);
		if ((this.localizedMessage == null)
				|| this.localizedMessage.equals(pErrorCode))
			this.localizedMessage = getMessage();
		this.cause = null;
	}

	/**
	 * <p>
	 * Construct an SPF exception containing an error code and an error message,
	 * as well as a localized message for that error code which is retrieved
	 * from your portlet's message resources. This constructor assumes the
	 * root-cause is null. Subsequent calls to {@link #getLocalizedMessage()}
	 * will return the localized message, while calls to {@link #getMessage()}
	 * will return a non-localized string (generally not suitable for the
	 * end-user) comprised of the error code and error message.
	 * </p>
	 * <p>
	 * See the class documentation above, for description of these attributes.
	 * </p>
	 * 
	 * @param pRequest
	 *            The portlet request
	 * @param pErrorCode
	 *            The error code (eg <code>forums.addNote.blank</code>)
	 * @param pErrorMessage
	 *            The error message - eg:
	 *            <code>New note text for forums thread cannot be blank.</code>
	 */
	public SPFException(PortletRequest pRequest, String pErrorCode,
			String pErrorMessage) {
		super("Error code: " + pErrorCode + "; Error message: " + pErrorMessage);
		this.errorCode = pErrorCode;
		this.errorMessage = pErrorMessage;
		if (pErrorCode != null)
			this.localizedMessage = I18nUtility
					.getMessage(pRequest, pErrorCode);
		if ((this.localizedMessage == null)
				|| this.localizedMessage.equals(pErrorCode))
			this.localizedMessage = getMessage();
		this.cause = null;
	}

	/**
	 * <p>
	 * Construct an SPF exception containing an error code, error message, some
	 * kind of root-cause {@link java.lang.Throwable}, and a localized message
	 * for that error code which is retrieved from your portlet's message
	 * resources. Subsequent calls to {@link #getLocalizedMessage()} will return
	 * the localized message, while calls to {@link #getMessage()} will return a
	 * non-localized string (generally not suitable for the end-user) comprised
	 * of the error code, error message, and the throwable's message (ie its
	 * {@link java.lang.Throwable#getMessage()} output).
	 * </p>
	 * <p>
	 * See the class documentation above, for description of these attributes.
	 * </p>
	 * 
	 * @param pRequest
	 *            The portlet request
	 * @param pErrorCode
	 *            The error code (eg <code>forums.addNote.blank</code>)
	 * @param pCause
	 *            Some throwable (exception) which is the root cause of this one
	 * @param pErrorMessage
	 *            The error message - eg:
	 *            <code>New note text for forums thread cannot be blank.</code>
	 */
	public SPFException(PortletRequest pRequest, String pErrorCode,
			Throwable pCause, String pErrorMessage) {
		super("Error code: " + pErrorCode + "; Error message: " + pErrorMessage
				+ "; Cause: " + pCause, pCause);
		this.errorCode = pErrorCode;
		this.errorMessage = pErrorMessage;
		if (pErrorCode != null)
			this.localizedMessage = I18nUtility
					.getMessage(pRequest, pErrorCode);
		if ((this.localizedMessage == null)
				|| this.localizedMessage.equals(pErrorCode))
			this.localizedMessage = getMessage();
		this.cause = pCause;
	}

	// --------------------------------------------------------- Public methods

	/**
	 * Returns the error code provided to the constructor.
	 * 
	 * @return The error code.
	 */
	public String getErrorCode() {
		return this.errorCode;
	}

	/**
	 * Returns the root-cause throwable (eg, exception) provided to the
	 * constructor (null if none).
	 * 
	 * @return The root-cause for this SPF exception.
	 */
	public Throwable getCause() {
		return this.cause;
	}

	/**
	 * Returns the error message provided to the constructor.
	 * 
	 * @return
	 */
	public String getErrorMessage() {
		return this.errorMessage;
	}

	/**
	 * Returns the localized error message determined by the constructor: either
	 * the one from your message resources corresponding to the error code, or a
	 * default comprised of the error code, error message, and/or throwable
	 * message (this default is also the same as the return value of
	 * {@link #getMessage()}). This method overrides the default method in
	 * {@link java.lang.Throwable}. Please see the constructor and class
	 * documentation for more information.
	 * 
	 * @return
	 */
	public String getLocalizedMessage() {
		return this.localizedMessage;
	}

	/**
	 * Returns a default message combining the error code, error message, and/or
	 * root-cause throwable message provided to the constructor. Generally
	 * speaking, this message is not localized and not suitable for display to
	 * the user.
	 */
	public String getMessage() {
		return super.getMessage();
	}
}
